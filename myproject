#!/usr/bin/env -S mycmd project run
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

project.load_task_library "shell"

#----------------------------------------
# Constants
# shellcheck disable=SC2154
readonly BUILD_DIR="${MYPROJECT_BASE_DIR}/build"
readonly EXECUTABLE="${BUILD_DIR}/aspirations"
readonly JPM_TREE_DIR="${MYPROJECT_BASE_DIR}/jpm_tree"

mycmd.trace "Set the following constants:"
mycmd.trace "- BUILD_DIR:    ${BUILD_DIR}"
mycmd.trace "- EXECUTABLE:   ${EXECUTABLE}"
mycmd.trace "- JPM_TREE_DIR: ${JPM_TREE_DIR}"

#----------------------------------------
# Project File Sets

#----------------------------------------
# Just myproject
project.register_fileset MYPROJECT_ONLY
# shellcheck disable=SC2154
project.add_files_to_fileset MYPROJECT_ONLY "${MYPROJECT_PROJECT_FILE}"

project.register_task_with_fileset list-myproject-only project.list-files MYPROJECT_ONLY
project.register_task_with_fileset format-myproject-only project:shell.format MYPROJECT_ONLY
project.register_task_with_fileset lint-myproject-only project:shell.lint MYPROJECT_ONLY

#----------------------------------------
# All Janet Files
project.register_fileset JANET_FILES
# -maxdepth is a temporary work-around to ignore jpm_tree
# shellcheck disable=SC2154
project.find_files_for_fileset JANET_FILES "${MYPROJECT_BASE_DIR}" -maxdepth 1 -type f -name "*.janet"
project.register_task_with_fileset list-janet-files project.list-files JANET_FILES

#----------------------------------------
# Build Commands
mycmd.init_bin jpm

function exec-jpm() {
    mycmd.bin_execute jpm --local "${@}"
}

readonly JPM_TREE_JANET_PATH="${JPM_TREE_DIR}/bin/janet"

function deps() {
    exec-jpm deps

    if [[ -e "${JPM_TREE_JANET_PATH}" ]]; then
        mycmd.trace "Janet symlink already exists"
        return 0
    fi

    # Add a symlink to the system janet in place so scripts in ./jpm_tree will work
    local janet_path
    if ! janet_path="$(command -v janet 2>/dev/null)"; then
        mycmd.log "Janet not found."
        return 1
    fi
    readonly janet_path

    if ! ln -s "${janet_path}" "${JPM_TREE_JANET_PATH}"; then
        mycmd.log "Error creating symlink to system Janet."
        return 1
    fi
}
project.register_task deps

function build() {
    exec-jpm build
}
project.register_task build

function install() {
    exec-jpm install
}
project.register_task install

function execute() {
    if [[ ! -e "${EXECUTABLE}" ]]; then
        project.execute_tasks build
    fi

    "${EXECUTABLE}" "${@}"
}
project.register_task execute

function clean() {
    local d

    for d in "${BUILD_DIR}" "${JPM_TREE_DIR}"; do
        if [[ -d "${d}" ]]; then
            project.verbose "Removing '${d}'."
            rm -rf "${d}" || true
        fi
    done
}
project.register_task clean

readonly JANET_FORMAT_EXE="${JPM_TREE_DIR}/bin/janet-format"
function format_janet_files() {
    local -n fileset="${1}"

    project.output_only_if_not_quiet "Formatting Janet files in fileset '${!fileset}'."

    if [[ ! -e "${JANET_FORMAT_EXE}" ]]; then
        project.execute_tasks deps
    fi

    "${JANET_FORMAT_EXE}" "${fileset[@]}"
}
project.register_task_with_fileset format \
    format_janet_files \
    JANET_FILES
